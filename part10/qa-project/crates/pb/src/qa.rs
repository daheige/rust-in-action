// This file is @generated by prost-build.
/// 登录请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserLoginRequest {
    /// 用户名
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    /// 访问密码
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
/// 登录返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserLoginReply {
    /// 登录成功返回的唯一标识token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
/// 用户退出请求，直接清理redis中的存放的数据
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserLogoutRequest {
    /// 唯一标识token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
/// 用户退出返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserLogoutReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 用户注册请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserRegisterRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
/// 用户注册返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserRegisterReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 验证登录token请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct VerifyTokenRequest {
    /// 登录成功后的token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// 请求id
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// 验证token返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct VerifyTokenReply {
    /// 1表示验证成功，0验证失败
    #[prost(int64, tag = "1")]
    pub state: i64,
    /// 验证失败返回具体的提示信息
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
    /// 当前用户username
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
}
/// 发表问题
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AddQuestionRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// 创建者
    #[prost(string, tag = "3")]
    pub created_by: ::prost::alloc::string::String,
}
/// 发表问题返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AddQuestionReply {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// 删除问题请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct DeleteQuestionRequest {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// 删除问题返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct DeleteQuestionReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 更新问题请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UpdateQuestionRequest {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 标题
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    /// 内容正文
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    /// 更新者
    #[prost(string, tag = "4")]
    pub updated_by: ::prost::alloc::string::String,
}
/// 更新问题返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UpdateQuestionReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 答案实体
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerEntity {
    /// 回答id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 问题id
    #[prost(int64, tag = "2")]
    pub question_id: i64,
    /// 回答内容
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    /// 回答者
    #[prost(string, tag = "4")]
    pub created_by: ::prost::alloc::string::String,
    /// 点赞数，添加时默认为0
    #[prost(int64, tag = "5")]
    pub agree_count: i64,
    /// 当前用户是否点赞
    #[prost(bool, tag = "6")]
    pub has_agreed: bool,
}
/// 添加答案
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AddAnswerRequest {
    #[prost(message, optional, tag = "1")]
    pub answer: ::core::option::Option<AnswerEntity>,
}
/// 添加回答返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AddAnswerReply {
    /// 回答唯一标识
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// 删除回答
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct DeleteAnswerRequest {
    /// 回答id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 默认当前用户
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// 删除回答返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct DeleteAnswerReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 更新回答基本信息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UpdateAnswerRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 回答内容
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// 用户名
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
}
/// 更新回答返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UpdateAnswerReply {
    #[prost(int64, tag = "1")]
    pub state: i64,
}
/// 回答点赞请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerAgreeRequest {
    /// 回答id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 用户名
    #[prost(string, tag = "2")]
    pub created_by: ::prost::alloc::string::String,
}
/// 回答点赞返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerAgreeReply {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 这个点赞数相对来说是准确的，如果高并发场景下，它等于点赞增量数+点赞之前的数字
    #[prost(int64, tag = "2")]
    pub agree_count: i64,
}
/// 问题详情请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct QuestionDetailRequest {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 当前用户
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// 问题详情，返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct QuestionDetailReply {
    #[prost(message, optional, tag = "1")]
    pub question: ::core::option::Option<QuestionEntity>,
}
/// 问题实体
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct QuestionEntity {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 问题标题
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    /// 内容，这里只返回部分内容
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    /// 用户名
    #[prost(string, tag = "4")]
    pub username: ::prost::alloc::string::String,
    /// 问题阅读数
    #[prost(int64, tag = "5")]
    pub read_count: i64,
    /// 回答数量
    #[prost(int64, tag = "6")]
    pub reply_count: i64,
}
/// 最新问题列表
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct LatestQuestionsRequest {
    /// 用户名
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    /// 上一次的question_id，第一页默认为0
    #[prost(int64, tag = "2")]
    pub last_id: i64,
    #[prost(int64, tag = "3")]
    pub limit: i64,
}
/// 最新问题列表返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct LatestQuestionsReply {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<QuestionEntity>,
    /// 上一次的question_id
    #[prost(int64, tag = "2")]
    pub last_id: i64,
    /// 是否到底了
    #[prost(bool, tag = "3")]
    pub is_end: bool,
}
/// 问题下的回答接口
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerListRequest {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub question_id: i64,
    /// 当前页数
    #[prost(int64, tag = "2")]
    pub page: i64,
    /// 每页数据
    #[prost(int64, tag = "3")]
    pub limit: i64,
    /// 当前用户
    #[prost(string, tag = "4")]
    pub username: ::prost::alloc::string::String,
}
/// 回答列表返回结果
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerListReply {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<AnswerEntity>,
    #[prost(int64, tag = "2")]
    pub total: i64,
    #[prost(int64, tag = "3")]
    pub total_page: i64,
    /// 每页显示个数
    #[prost(int64, tag = "4")]
    pub page_size: i64,
    /// 当前第几页
    #[prost(int64, tag = "5")]
    pub current_page: i64,
    /// 数据是否到底了
    #[prost(bool, tag = "6")]
    pub is_end: bool,
}
/// 查看回答详情
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerDetailRequest {
    /// 问题id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// 当前用户
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AnswerDetailReply {
    #[prost(message, optional, tag = "1")]
    pub answer: ::core::option::Option<AnswerEntity>,
}
/// Generated client implementations.
pub mod qa_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// qa服务接口定义
    #[derive(Debug, Clone)]
    pub struct QaServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QaServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QaServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QaServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            QaServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 用户登录
        pub async fn user_login(
            &mut self,
            request: impl tonic::IntoRequest<super::UserLoginRequest>,
        ) -> std::result::Result<tonic::Response<super::UserLoginReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/UserLogin");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "UserLogin"));
            self.inner.unary(req, path, codec).await
        }
        /// 用户退出
        pub async fn user_logout(
            &mut self,
            request: impl tonic::IntoRequest<super::UserLogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::UserLogoutReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/UserLogout");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "UserLogout"));
            self.inner.unary(req, path, codec).await
        }
        /// 用户注册
        pub async fn user_register(
            &mut self,
            request: impl tonic::IntoRequest<super::UserRegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::UserRegisterReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/UserRegister");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "UserRegister"));
            self.inner.unary(req, path, codec).await
        }
        /// 验证登录的token是否有效
        pub async fn verify_token(
            &mut self,
            request: impl tonic::IntoRequest<super::VerifyTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::VerifyTokenReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/VerifyToken");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "VerifyToken"));
            self.inner.unary(req, path, codec).await
        }
        /// 发表问题
        pub async fn add_question(
            &mut self,
            request: impl tonic::IntoRequest<super::AddQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::AddQuestionReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/AddQuestion");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "AddQuestion"));
            self.inner.unary(req, path, codec).await
        }
        /// 删除问题
        pub async fn delete_question(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteQuestionReply>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/DeleteQuestion");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "DeleteQuestion"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改问题
        pub async fn update_question(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateQuestionReply>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/UpdateQuestion");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "UpdateQuestion"));
            self.inner.unary(req, path, codec).await
        }
        /// 查看问题详情
        pub async fn question_detail(
            &mut self,
            request: impl tonic::IntoRequest<super::QuestionDetailRequest>,
        ) -> std::result::Result<tonic::Response<super::QuestionDetailReply>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/QuestionDetail");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "QuestionDetail"));
            self.inner.unary(req, path, codec).await
        }
        /// 最新问题列表（采用下拉分页形式获取数据，按照id desc倒序）
        pub async fn latest_questions(
            &mut self,
            request: impl tonic::IntoRequest<super::LatestQuestionsRequest>,
        ) -> std::result::Result<tonic::Response<super::LatestQuestionsReply>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/LatestQuestions");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "LatestQuestions"));
            self.inner.unary(req, path, codec).await
        }
        /// 回答列表
        pub async fn answer_list(
            &mut self,
            request: impl tonic::IntoRequest<super::AnswerListRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerListReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/AnswerList");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "AnswerList"));
            self.inner.unary(req, path, codec).await
        }
        /// 添加问题回答
        pub async fn add_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::AddAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::AddAnswerReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/AddAnswer");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "AddAnswer"));
            self.inner.unary(req, path, codec).await
        }
        /// 删除问题对应的回答
        pub async fn delete_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteAnswerReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/DeleteAnswer");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "DeleteAnswer"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改回答
        pub async fn update_answer(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateAnswerReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/UpdateAnswer");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "UpdateAnswer"));
            self.inner.unary(req, path, codec).await
        }
        /// 查看答案详情
        pub async fn answer_detail(
            &mut self,
            request: impl tonic::IntoRequest<super::AnswerDetailRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerDetailReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/AnswerDetail");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "AnswerDetail"));
            self.inner.unary(req, path, codec).await
        }
        /// 用户点赞回答
        pub async fn answer_agree(
            &mut self,
            request: impl tonic::IntoRequest<super::AnswerAgreeRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerAgreeReply>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/qa.QAService/AnswerAgree");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("qa.QAService", "AnswerAgree"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod qa_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QaServiceServer.
    #[async_trait]
    pub trait QaService: Send + Sync + 'static {
        /// 用户登录
        async fn user_login(
            &self,
            request: tonic::Request<super::UserLoginRequest>,
        ) -> std::result::Result<tonic::Response<super::UserLoginReply>, tonic::Status>;
        /// 用户退出
        async fn user_logout(
            &self,
            request: tonic::Request<super::UserLogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::UserLogoutReply>, tonic::Status>;
        /// 用户注册
        async fn user_register(
            &self,
            request: tonic::Request<super::UserRegisterRequest>,
        ) -> std::result::Result<tonic::Response<super::UserRegisterReply>, tonic::Status>;
        /// 验证登录的token是否有效
        async fn verify_token(
            &self,
            request: tonic::Request<super::VerifyTokenRequest>,
        ) -> std::result::Result<tonic::Response<super::VerifyTokenReply>, tonic::Status>;
        /// 发表问题
        async fn add_question(
            &self,
            request: tonic::Request<super::AddQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::AddQuestionReply>, tonic::Status>;
        /// 删除问题
        async fn delete_question(
            &self,
            request: tonic::Request<super::DeleteQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteQuestionReply>, tonic::Status>;
        /// 修改问题
        async fn update_question(
            &self,
            request: tonic::Request<super::UpdateQuestionRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateQuestionReply>, tonic::Status>;
        /// 查看问题详情
        async fn question_detail(
            &self,
            request: tonic::Request<super::QuestionDetailRequest>,
        ) -> std::result::Result<tonic::Response<super::QuestionDetailReply>, tonic::Status>;
        /// 最新问题列表（采用下拉分页形式获取数据，按照id desc倒序）
        async fn latest_questions(
            &self,
            request: tonic::Request<super::LatestQuestionsRequest>,
        ) -> std::result::Result<tonic::Response<super::LatestQuestionsReply>, tonic::Status>;
        /// 回答列表
        async fn answer_list(
            &self,
            request: tonic::Request<super::AnswerListRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerListReply>, tonic::Status>;
        /// 添加问题回答
        async fn add_answer(
            &self,
            request: tonic::Request<super::AddAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::AddAnswerReply>, tonic::Status>;
        /// 删除问题对应的回答
        async fn delete_answer(
            &self,
            request: tonic::Request<super::DeleteAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteAnswerReply>, tonic::Status>;
        /// 修改回答
        async fn update_answer(
            &self,
            request: tonic::Request<super::UpdateAnswerRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateAnswerReply>, tonic::Status>;
        /// 查看答案详情
        async fn answer_detail(
            &self,
            request: tonic::Request<super::AnswerDetailRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerDetailReply>, tonic::Status>;
        /// 用户点赞回答
        async fn answer_agree(
            &self,
            request: tonic::Request<super::AnswerAgreeRequest>,
        ) -> std::result::Result<tonic::Response<super::AnswerAgreeReply>, tonic::Status>;
    }
    /// qa服务接口定义
    #[derive(Debug)]
    pub struct QaServiceServer<T: QaService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: QaService> QaServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QaServiceServer<T>
    where
        T: QaService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/qa.QAService/UserLogin" => {
                    #[allow(non_camel_case_types)]
                    struct UserLoginSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::UserLoginRequest> for UserLoginSvc<T> {
                        type Response = super::UserLoginReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserLoginRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as QaService>::user_login(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UserLoginSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/UserLogout" => {
                    #[allow(non_camel_case_types)]
                    struct UserLogoutSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::UserLogoutRequest> for UserLogoutSvc<T> {
                        type Response = super::UserLogoutReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserLogoutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as QaService>::user_logout(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UserLogoutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/UserRegister" => {
                    #[allow(non_camel_case_types)]
                    struct UserRegisterSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::UserRegisterRequest> for UserRegisterSvc<T> {
                        type Response = super::UserRegisterReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserRegisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::user_register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UserRegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/VerifyToken" => {
                    #[allow(non_camel_case_types)]
                    struct VerifyTokenSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::VerifyTokenRequest> for VerifyTokenSvc<T> {
                        type Response = super::VerifyTokenReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VerifyTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::verify_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = VerifyTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/AddQuestion" => {
                    #[allow(non_camel_case_types)]
                    struct AddQuestionSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::AddQuestionRequest> for AddQuestionSvc<T> {
                        type Response = super::AddQuestionReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddQuestionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::add_question(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddQuestionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/DeleteQuestion" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteQuestionSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::DeleteQuestionRequest>
                        for DeleteQuestionSvc<T>
                    {
                        type Response = super::DeleteQuestionReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteQuestionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::delete_question(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteQuestionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/UpdateQuestion" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateQuestionSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::UpdateQuestionRequest>
                        for UpdateQuestionSvc<T>
                    {
                        type Response = super::UpdateQuestionReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateQuestionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::update_question(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateQuestionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/QuestionDetail" => {
                    #[allow(non_camel_case_types)]
                    struct QuestionDetailSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::QuestionDetailRequest>
                        for QuestionDetailSvc<T>
                    {
                        type Response = super::QuestionDetailReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuestionDetailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::question_detail(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = QuestionDetailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/LatestQuestions" => {
                    #[allow(non_camel_case_types)]
                    struct LatestQuestionsSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::LatestQuestionsRequest>
                        for LatestQuestionsSvc<T>
                    {
                        type Response = super::LatestQuestionsReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LatestQuestionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::latest_questions(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LatestQuestionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/AnswerList" => {
                    #[allow(non_camel_case_types)]
                    struct AnswerListSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::AnswerListRequest> for AnswerListSvc<T> {
                        type Response = super::AnswerListReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AnswerListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as QaService>::answer_list(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AnswerListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/AddAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct AddAnswerSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::AddAnswerRequest> for AddAnswerSvc<T> {
                        type Response = super::AddAnswerReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as QaService>::add_answer(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/DeleteAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAnswerSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::DeleteAnswerRequest> for DeleteAnswerSvc<T> {
                        type Response = super::DeleteAnswerReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::delete_answer(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/UpdateAnswer" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateAnswerSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::UpdateAnswerRequest> for UpdateAnswerSvc<T> {
                        type Response = super::UpdateAnswerReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateAnswerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::update_answer(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateAnswerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/AnswerDetail" => {
                    #[allow(non_camel_case_types)]
                    struct AnswerDetailSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::AnswerDetailRequest> for AnswerDetailSvc<T> {
                        type Response = super::AnswerDetailReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AnswerDetailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::answer_detail(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AnswerDetailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/qa.QAService/AnswerAgree" => {
                    #[allow(non_camel_case_types)]
                    struct AnswerAgreeSvc<T: QaService>(pub Arc<T>);
                    impl<T: QaService> tonic::server::UnaryService<super::AnswerAgreeRequest> for AnswerAgreeSvc<T> {
                        type Response = super::AnswerAgreeReply;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AnswerAgreeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QaService>::answer_agree(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AnswerAgreeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    Ok(http::Response::builder()
                        .status(200)
                        .header("grpc-status", "12")
                        .header("content-type", "application/grpc")
                        .body(empty_body())
                        .unwrap())
                }),
            }
        }
    }
    impl<T: QaService> Clone for QaServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: QaService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: QaService> tonic::server::NamedService for QaServiceServer<T> {
        const NAME: &'static str = "qa.QAService";
    }
}
